var documenterSearchIndex = {"docs":
[{"location":"atomicsystems/#atomic-systems","page":"Atomic systems","title":"Atomic systems","text":"","category":"section"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"Since we anticipate atomic systems to be a commonly needed representation, AtomsBase provides two flexible implementations for this setting. One implementation follows the struct-of-arrays approach introducing the AtomView type to conveniently expose atomic data. The more flexible implementation is based on an array-of-structs approach and can be easily customised, e.g. by adding custom properties or by swapping the underlying Atom struct by a custom one. In both cases the respective datastructures can be used either fully or in parts in downstream packages and we hope these to develop into universally useful types within the Julia ecosystem over time.","category":"page"},{"location":"atomicsystems/#Struct-of-Arrays-/-FastSystem","page":"Atomic systems","title":"Struct of Arrays / FastSystem","text":"","category":"section"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"The file src/fast_system.jl contains an implementation of AtomsBase based on the struct-of-arrays approach. All species data is stored as plain arrays, but for convenience indexing of individual atoms is supported by a light-weight AtomView. See the implementation files as well as the tests for how these can be used.","category":"page"},{"location":"atomicsystems/#Atoms-and-FlexibleSystem","page":"Atomic systems","title":"Atoms and FlexibleSystem","text":"","category":"section"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"A flexible implementation of the interface is provided by the FlexibleSystem and the Atom structs for representing atomic systems.","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"An Atom object can be constructed just by passing an identifier (e.g. symbol like :C, atomic number like 6) and a vector of positions as","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"atom = Atom(:C, [0, 1, 2.]u\"bohr\")","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"This automatically fills the atom with standard data such as the atomic mass. Such data can be accessed using the AtomsBase interface functions such as atomic_mass(atom), position(atom), velocity(atom), atomic_mass(atom), etc. See src/atom.jl for details.","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"Custom properties can be easily attached to an Atom by supplying arbitrary keyword arguments upon construction. For example to attach a pseudopotential for using the structure with DFTK, construct the atom as","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"atom = Atom(:C, [0, 1, 2.]u\"bohr\", pseudopotential=\"hgh/lda/c-q4\")","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"which will make the pseudopotential identifier available as atom.pseudopotential. Updating an atomic property proceeds similarly. E.g.","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"newatom = Atom(;atom=atom, atomic_mass=13u\"u\")","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"makes a new carbon atom with all properties identical to atom (including custom ones), but setting the atomic_mass to 13 units.","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"Once the atoms are constructed these can be assembled into a system. For example to place a hydrogen molecule into a cubic box of 10Å and periodic boundary conditions, use:","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"bounding_box = [[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]u\"Å\"\nboundary_conditions = [Periodic(), Periodic(), Periodic()]\nhydrogen = FlexibleSystem([Atom(:H, [0, 0, 1.]u\"bohr\"),\n                           Atom(:H, [0, 0, 3.]u\"bohr\")],\n                          bounding_box, boundary_conditions)","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"An update constructor is supported as well (see src/flexible_system.jl).","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"Oftentimes more convenient are the functions atomic_system, isolated_system, periodic_system, which cover some standard atomic system setups:","category":"page"},{"location":"atomicsystems/","page":"Atomic systems","title":"Atomic systems","text":"# Same hydrogen system with periodic BCs:\nbounding_box = [[10.0, 0.0, 0.0], [0.0, 10.0, 0.0], [0.0, 0.0, 10.0]]u\"Å\"\nhydrogen = periodic_system([:H => [0, 0, 1.]u\"bohr\",\n                            :H => [0, 0, 3.]u\"bohr\"],\n                           bounding_box)\n\n# Silicon unit cell using fractional positions\n# (Common for solid-state simulations)\nbounding_box = 10.26 / 2 * [[0, 0, 1], [1, 0, 1], [1, 1, 0]]u\"bohr\"\nsilicon = periodic_system([:Si =>  ones(3)/8,\n                           :Si => -ones(3)/8],\n                           bounding_box, fractional=true)\n\n# Isolated H2 molecule in vacuum (Infinite box and zero dirichlet BCs)\n# (Standard setup for molecular simulations)\nhydrogen = isolated_system([:H => [0, 0, 1.]u\"bohr\",\n                            :H => [0, 0, 3.]u\"bohr\"])\n","category":"page"},{"location":"overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"The main abstract type introduced in AtomsBase is AbstractSystem{D}. The D parameter indicates the number of spatial dimensions in the system. Contained inside the system are species, which may have an arbitrary type, accessible via the species_type(system) function. While AtomsBase provides some default species types (e.g. Atom and AtomView for standard atoms) in principle no constraints are made on this species type.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"The main power of the interface comes from predictable behavior of several core functions to access information about a system and the species. Various categories of such functions are described below.","category":"page"},{"location":"overview/#System-geometry","page":"Overview","title":"System geometry","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"Functions that need to be dispatched:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"bounding_box(::AbstractSystem{D})::SVector{D,SVector{D,<:Unitful.Length}}: returns D vectors of length D that describe the \"box\" in which the system lives\nboundary_conditions(::AbstractSystem{D})::SVector{D,BoundaryCondition}): returns a vector of length D of BoundaryCondition objects to describe what happens at the edges of the box","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"Functions that will work automatically:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"periodicity: returns a vector of length D of Bools for whether each dimension of the system has periodic boundary conditions\nn_dimensions: returns D, the number of spatial dimensions of the system","category":"page"},{"location":"overview/#Iteration-and-Indexing-over-systems","page":"Overview","title":"Iteration and Indexing over systems","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"There is a presumption of the ability to somehow extract an individual component (e.g. a single atom or molecule) of this system, though there are no constraints on the type of this component. To achieve this, an AbstractSystem object is expected to implement the Julia interfaces for iteration and indexing in order to access representations of individual components of the system. Some default dispatches of parts of these interfaces are already included, so the minimal set of functions to dispatch in a concrete implementation is Base.getindex and Base.length, though it may be desirable to customize additional behavior depending on context.","category":"page"},{"location":"overview/#System-state-and-properties","page":"Overview","title":"System state and properties","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"The only required properties to be specified of the system is the species and implementations of standard functions accessing the properties of the species, currently position, velocity, atomic_symbol, atomic_mass, atomic_number, n_dimensions, element.  Based on these methods respective equivalent methods acting on an AbstractSystem will be automatically available, e.g. using the iteration interface of the AbstractSystem (see above). Most of the property accessors on the AbstractSystem also have indexed signatures to extract data from a particular species directly, for example:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"position(sys, i) # position of `i`th particle in `sys`","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"Currently, this syntax only supports linear indexing.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"To simplify working with AtomsBase, default implementations for systems composed of atoms are provided (see Atomic systems).","category":"page"},{"location":"overview/#Struct-of-Arrays-vs.-Array-of-Structs","page":"Overview","title":"Struct-of-Arrays vs. Array-of-Structs","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"The \"struct-of-arrays\" (SoA) vs. \"array-of-structs\" (AoS) is a common design dilemma in representations of systems such as these. We have deliberately designed this interface to be agnostic to how a concrete implementation chooses to structure its data. Some specific notes regarding how implementations might differ for these two paradigms are included below.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"A way to think about this broadly is that the difference amounts to the ordering of function calls. For example, to get the position of a single particle in an AoS implementation, the explicit function chaining would be position(getindex(sys)) (i.e. extract the single struct representing the particle of interest and query its position), while for SoA, one should prefer an implementation like getindex(position(sys)) (extract the array of positions, then index into it for a single particle). The beauty of an abstract interface in Julia is that these details can be, in large part, abstracted away through method dispatch such that the end user sees the same expected behavior irrespective of how things are implemented \"under the hood\". For concrete implementations see the section on atomic systems.","category":"page"},{"location":"overview/#Boundary-Conditions","page":"Overview","title":"Boundary Conditions","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"Finally, we include support for defining boundary conditions. Currently included are Periodic and DirichletZero. There should be one boundary condition specified for each spatial dimension represented.","category":"page"},{"location":"apireference/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"apireference/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"apireference/","page":"API reference","title":"API reference","text":"Pages = [\"apireference.md\"]","category":"page"},{"location":"apireference/#Types","page":"API reference","title":"Types","text":"","category":"section"},{"location":"apireference/","page":"API reference","title":"API reference","text":"AbstractSystem{D}","category":"page"},{"location":"apireference/#AtomsBase.AbstractSystem","page":"API reference","title":"AtomsBase.AbstractSystem","text":"AbstractSystem{D}\n\nA D-dimensional system.\n\n\n\n\n\n","category":"type"},{"location":"apireference/#Functions","page":"API reference","title":"Functions","text":"","category":"section"},{"location":"apireference/","page":"API reference","title":"API reference","text":"atomic_mass\natomic_number\natomic_symbol\nchemical_formula\nboundary_conditions\nbounding_box\nelement\nn_dimensions\nperiodicity\nspecies_type\nvelocity\nposition","category":"page"},{"location":"apireference/#AtomsBase.atomic_mass","page":"API reference","title":"AtomsBase.atomic_mass","text":"atomic_mass(sys::AbstractSystem)\natomic_mass(sys::AbstractSystem, i)\natomic_mass(species)\n\nVector of atomic masses in the system sys or the atomic mass of a particular species / the ith species in sys. The elements are <: Unitful.Mass.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.atomic_number","page":"API reference","title":"AtomsBase.atomic_number","text":"atomic_number(sys::AbstractSystem)\natomic_number(sys::AbstractSystem, i)\natomic_number(species)\n\nVector of atomic numbers in the system sys or the atomic number of a particular species / the ith species in sys.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.atomic_symbol","page":"API reference","title":"AtomsBase.atomic_symbol","text":"atomic_symbol(sys::AbstractSystem)\natomic_symbol(sys::AbstractSystem, i)\natomic_symbol(species)\n\nVector of atomic symbols in the system sys or the atomic symbol of a particular species / the ith species in sys.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.chemical_formula","page":"API reference","title":"AtomsBase.chemical_formula","text":"Returns the chemical formula of an AbstractSystem as a string.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.boundary_conditions","page":"API reference","title":"AtomsBase.boundary_conditions","text":"boundary_conditions(sys::AbstractSystem{D})\n\nReturn a vector of length D of BoundaryCondition objects, one for each direction described by bounding_box(sys).\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.bounding_box","page":"API reference","title":"AtomsBase.bounding_box","text":"bounding_box(sys::AbstractSystem{D})\n\nReturn a vector of length D of vectors of length D that describe the \"box\" in which the system sys is defined.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.element","page":"API reference","title":"AtomsBase.element","text":"The element corresponding to a species/atom (or missing).\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.n_dimensions","page":"API reference","title":"AtomsBase.n_dimensions","text":"n_dimensions(::AbstractSystem)\nn_dimensions(atom)\n\nReturn number of dimensions.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.periodicity","page":"API reference","title":"AtomsBase.periodicity","text":"Return vector indicating whether the system is periodic along a dimension.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.species_type","page":"API reference","title":"AtomsBase.species_type","text":"species_type(::AbstractSystem)\n\nReturn the type used to represent a species or atom.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#AtomsBase.velocity","page":"API reference","title":"AtomsBase.velocity","text":"velocity(sys::AbstractSystem{D})\nvelocity(sys::AbstractSystem, index)\nvelocity(species)\n\nReturn a vector of velocities of every particle in the system sys. Return type should be a vector of vectors each containing D elements that are <:Unitful.Velocity. If an index is passed or the action is on a species, return only the velocity of the referenced species. Returned value of the function may be missing.\n\n\n\n\n\n","category":"function"},{"location":"apireference/#Base.position","page":"API reference","title":"Base.position","text":"position(sys::AbstractSystem{D})\nposition(sys::AbstractSystem, index)\nposition(species)\n\nReturn a vector of positions of every particle in the system sys. Return type should be a vector of vectors each containing D elements that are <:Unitful.Length. If an index is passed or the action is on a species, return only the position of the referenced species / species on that index.\n\n\n\n\n\n","category":"function"},{"location":"#AtomsBase","page":"Home","title":"AtomsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julian abstract interface for atomic structures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtomsBase is currently in the relatively early stages of development and we very much want developer/user input! If you think anything about it should be  added/removed/changed, please file an issue or chime into the discussion on an existing one! (Look particularly for issues with the question label)","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtomsBase is an abstract interface for representation of atomic geometries in Julia. It aims to be a lightweight means of facilitating interoperability between various tools including...","category":"page"},{"location":"","page":"Home","title":"Home","text":"chemical simulation engines (e.g. density functional theory, molecular dynamics, etc.)\nfile I/O with standard formats (.cif, .xyz, ...)\nnumerical tools: sampling, integration schemes, etc.\nautomatic differentiation and machine learning systems\nvisualization (e.g. plot recipes)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, the design philosophy is to be as lightweight as possible, with only a small set of required function dispatches to make adopting the interface into existing packages easy. We also provide a couple of standard flexible implementations of the interface that we envision to be broadly applicable. If features beyond these are required we encourage developers to open PRs or provide their own implementations. For more on how to use the package, see the documentation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomsBase can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add AtomsBase","category":"page"},{"location":"#Packages-Using-AtomsBase","page":"Home","title":"Packages Using AtomsBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following (not all yet-registered) packages currently make use of this interface (please feel free to send a PR to add to this list!):","category":"page"},{"location":"","page":"Home","title":"Home","text":"ASEPotential\nAtomIO: I/O for atomic structures, also wraps some ASE functionality\nAtomistic: integrated workflow for MD simulations, part of CESMIX\nBFPIS\nChemistryFeaturization: Interface for featurization of atomic structures for input into machine learning models, part of Chemellia\nDFTK: density functional theory simulations\nInteratomicPotentials: implementations of a variety of interatomic potentials, also part of CESMIX\nMolly: molecular dynamics simulations\nXtals: I/O and structure representation for crystals","category":"page"}]
}
